// <auto-generated />
using System;
using ElMaitre.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ElMaitre.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190822050724_SessionNote11")]
    partial class SessionNote11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ElMaitre.DAL.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FbId");

                    b.Property<int>("Gender");

                    b.Property<int?>("LawyerId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NameEn");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfileImg");

                    b.Property<int?>("ProvinceId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProvinceId");

                    b.ToTable("IdentityUsers");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Description");

                    b.Property<string>("DescriptionEn");

                    b.Property<string>("ImagePath");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("NameEn");

                    b.HasKey("Id");

                    b.ToTable("Blog");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description");

                    b.Property<string>("DescriptionEn");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("NameEn");

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.ContractCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NameEn");

                    b.HasKey("Id");

                    b.ToTable("ContractCategory");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<int?>("AreaId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("FromUserId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<string>("ToUserId");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Lawyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Certificates");

                    b.Property<string>("CertificatesEn");

                    b.Property<string>("Description");

                    b.Property<string>("DescriptionEn");

                    b.Property<int?>("ExperienceId");

                    b.Property<double?>("Fees");

                    b.Property<bool?>("IsOnline");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("Rate");

                    b.Property<int?>("SpecializationId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<string>("VideoURL");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Lawyer");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.LawyerAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("Date");

                    b.Property<int>("LawyerId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<TimeSpan>("Time");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.ToTable("LawyerAppointment");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.LawyerExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("NameEn");

                    b.Property<int>("Price");

                    b.HasKey("Id");

                    b.ToTable("LawyerExperience");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.LawyerService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<int>("LawyerId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("PriceLevel2Provided");

                    b.Property<int>("PriceProvided");

                    b.Property<int>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("LawyerService");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.LawyerSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("NameEn");

                    b.HasKey("Id");

                    b.ToTable("LawyerSpecialization");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("acq_response_code");

                    b.Property<int?>("amount_cents");

                    b.Property<int?>("captured_amount");

                    b.Property<string>("clientId");

                    b.Property<string>("created_at");

                    b.Property<string>("currency");

                    b.Property<bool?>("error_occured");

                    b.Property<bool?>("has_parent_transaction");

                    b.Property<string>("hmac");

                    b.Property<int?>("integration_id");

                    b.Property<bool?>("is_3d_secure");

                    b.Property<bool?>("is_auth");

                    b.Property<bool?>("is_capture");

                    b.Property<bool?>("is_refund");

                    b.Property<bool?>("is_refunded");

                    b.Property<bool?>("is_standalone_payment");

                    b.Property<bool?>("is_void");

                    b.Property<bool?>("is_voided");

                    b.Property<int>("lawyerId");

                    b.Property<int?>("merchant_order_id");

                    b.Property<string>("message");

                    b.Property<int?>("order");

                    b.Property<int?>("ordtrans_id");

                    b.Property<int?>("owner");

                    b.Property<string>("pan");

                    b.Property<bool?>("pending");

                    b.Property<int?>("profile_id");

                    b.Property<int?>("refunded_amount_cents");

                    b.Property<int>("serviceId");

                    b.Property<string>("sub_type");

                    b.Property<bool?>("success");

                    b.Property<int?>("txn_response_code");

                    b.Property<string>("type");

                    b.HasKey("Id");

                    b.HasIndex("clientId");

                    b.HasIndex("lawyerId");

                    b.HasIndex("serviceId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.PaymentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<bool>("IsPaymentConfirmed");

                    b.Property<int>("LawyerId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("OrderId");

                    b.Property<int>("ServiceId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentService");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.PriceRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<double>("From");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<double>("To");

                    b.HasKey("Id");

                    b.ToTable("PriceRange");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NameEn");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("AnonymousEmail");

                    b.Property<string>("AnonymousName");

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("QuestionId");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionAnswer");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("TitleEn");

                    b.HasKey("Id");

                    b.ToTable("QuestionCategory");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<int>("LawyerId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("Rate");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LawyerId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.ReviewReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("ReviewId");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("ReviewReply");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<int>("CategoryId");

                    b.Property<string>("ContactNumber");

                    b.Property<int>("Duration");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("PaperWork");

                    b.Property<string>("Title");

                    b.Property<string>("TitleEn");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("IconPath");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("NameEn");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategory");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.ServicePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<int>("ExperienceId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<double>("Price");

                    b.Property<int>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicePrice");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<int>("AppointmentId");

                    b.Property<int>("Duration");

                    b.Property<bool>("IsFinished");

                    b.Property<bool>("IsPaymentConfirmed");

                    b.Property<bool>("IsStarted");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("OrderId");

                    b.Property<string>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime?>("StartedDate");

                    b.Property<string>("UserId");

                    b.Property<int?>("acq_response_code");

                    b.Property<int?>("amount_cents");

                    b.Property<int?>("captured_amount");

                    b.Property<string>("created_at");

                    b.Property<string>("currency");

                    b.Property<bool?>("has_parent_transaction");

                    b.Property<string>("hmac");

                    b.Property<int?>("integration_id");

                    b.Property<bool?>("is_3d_secure");

                    b.Property<bool?>("is_capture");

                    b.Property<bool?>("is_refund");

                    b.Property<bool?>("is_refunded");

                    b.Property<bool?>("is_standalone_payment");

                    b.Property<bool?>("is_void");

                    b.Property<bool?>("is_voided");

                    b.Property<string>("merchant_order_id");

                    b.Property<int?>("order");

                    b.Property<int?>("ordtrans_id");

                    b.Property<int?>("owner");

                    b.Property<string>("pan");

                    b.Property<bool?>("pending");

                    b.Property<int?>("profile_id");

                    b.Property<string>("sub_type");

                    b.Property<bool?>("success");

                    b.Property<int?>("txn_response_code");

                    b.Property<string>("type");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("UserId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.SessionNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("SessionId");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("SessionNote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ElMaitre.DAL.Data.ApplicationUser", b =>
                {
                    b.HasOne("ElMaitre.DAL.Models.Province", "Province")
                        .WithMany("Users")
                        .HasForeignKey("ProvinceId");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Contract", b =>
                {
                    b.HasOne("ElMaitre.DAL.Models.ContractCategory", "Category")
                        .WithMany("Contracts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Country", b =>
                {
                    b.HasOne("ElMaitre.DAL.Models.Area", "Area")
                        .WithMany("Countries")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Document", b =>
                {
                    b.HasOne("ElMaitre.DAL.Data.ApplicationUser", "FromUser")
                        .WithMany("ReceivedDocuments")
                        .HasForeignKey("FromUserId");

                    b.HasOne("ElMaitre.DAL.Data.ApplicationUser", "ToUser")
                        .WithMany("SentDocuments")
                        .HasForeignKey("ToUserId");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Lawyer", b =>
                {
                    b.HasOne("ElMaitre.DAL.Models.LawyerExperience", "Experience")
                        .WithMany("Lawyers")
                        .HasForeignKey("ExperienceId");

                    b.HasOne("ElMaitre.DAL.Models.LawyerSpecialization", "Specialization")
                        .WithMany("Lawyers")
                        .HasForeignKey("SpecializationId");

                    b.HasOne("ElMaitre.DAL.Data.ApplicationUser", "User")
                        .WithOne("Lawyer")
                        .HasForeignKey("ElMaitre.DAL.Models.Lawyer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.LawyerAppointment", b =>
                {
                    b.HasOne("ElMaitre.DAL.Models.Lawyer", "Lawyer")
                        .WithMany()
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.LawyerService", b =>
                {
                    b.HasOne("ElMaitre.DAL.Models.Lawyer", "Lawyer")
                        .WithMany("Services")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElMaitre.DAL.Models.Service", "Service")
                        .WithMany("Lawyers")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Order", b =>
                {
                    b.HasOne("ElMaitre.DAL.Data.ApplicationUser", "client")
                        .WithMany()
                        .HasForeignKey("clientId");

                    b.HasOne("ElMaitre.DAL.Models.Lawyer", "lawyer")
                        .WithMany()
                        .HasForeignKey("lawyerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElMaitre.DAL.Models.Service", "service")
                        .WithMany()
                        .HasForeignKey("serviceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.PaymentService", b =>
                {
                    b.HasOne("ElMaitre.DAL.Models.Lawyer", "Lawyer")
                        .WithMany()
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElMaitre.DAL.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElMaitre.DAL.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Province", b =>
                {
                    b.HasOne("ElMaitre.DAL.Models.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Question", b =>
                {
                    b.HasOne("ElMaitre.DAL.Models.QuestionCategory", "QuestionCategory")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElMaitre.DAL.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.QuestionAnswer", b =>
                {
                    b.HasOne("ElMaitre.DAL.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElMaitre.DAL.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Review", b =>
                {
                    b.HasOne("ElMaitre.DAL.Models.Lawyer", "Lawyer")
                        .WithMany("Reviews")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElMaitre.DAL.Data.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.ReviewReply", b =>
                {
                    b.HasOne("ElMaitre.DAL.Models.Review", "Review")
                        .WithMany("Replies")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElMaitre.DAL.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Service", b =>
                {
                    b.HasOne("ElMaitre.DAL.Models.ServiceCategory", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.ServicePrice", b =>
                {
                    b.HasOne("ElMaitre.DAL.Models.LawyerExperience", "Experience")
                        .WithMany()
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElMaitre.DAL.Models.Service", "Service")
                        .WithMany("Prices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.Session", b =>
                {
                    b.HasOne("ElMaitre.DAL.Models.LawyerAppointment", "Appointment")
                        .WithMany("Sessions")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElMaitre.DAL.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ElMaitre.DAL.Models.SessionNote", b =>
                {
                    b.HasOne("ElMaitre.DAL.Models.Session", "Session")
                        .WithMany("Notes")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElMaitre.DAL.Data.ApplicationUser", "User")
                        .WithMany("SessionNotes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ElMaitre.DAL.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ElMaitre.DAL.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ElMaitre.DAL.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ElMaitre.DAL.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
